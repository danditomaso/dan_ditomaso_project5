{"version":3,"sources":["serviceWorker.js","components/api.js","components/ThemePicker.js","components/GamePicker.js","components/Score.js","components/Header.js","components/helpers.js","components/Card.js","components/Footer.js","App.js","components/NotFound.js","components/Router.js","index.js"],"names":["Boolean","window","location","hostname","match","api","simpsons","url","apiKey","requiresKey","ThemePicker","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","setState","defineProperty","target","id","value","state","themes","_this2","react_default","a","createElement","className","htmlFor","props","map","theme","onChange","Component","GamePicker","preventDefault","gotoGame","history","push","updateThemePickerOptions","entries","keys","currentAPI","difficulty","name","action","onSubmit","type","placeholder","checked","components_ThemePicker","Score","score","Header","title","components_Score","currentScore","playerName","flattenArr","arr","_ref","concat","apply","toConsumableArray","randomizeArray","i","length","j","Math","floor","random","temp","Card","selected","solved","image","click","solvedArr","includes","toString","onClick","src","Footer","App","getCardImages","asyncToGenerator","regenerator_default","mark","_callee","promiseArray","cards","wrap","_context","prev","next","numOfRequestedImages","item","axios","get","Promise","all","t0","res","data","sent","console","log","shuffleCards","t1","error","stop","cardsArr","Array","from","flattenedArr","util","shuffledCards","checkForMatch","cardId","selectedCard","checkForSolved","_this$state","correctMatches","character","handleClick","event","gameTitle","timer","isShowing","flippedCards","_this$state2","components_Header","card","index","components_Card","key","components_Footer","notFound","Router","BrowserRouter","Switch","Route","exact","path","component","NotFound","ReactDOM","render","components_Router","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4aa4594a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const api = {\r\n  simpsons: {\r\n    url: `https://thesimpsonsquoteapi.glitch.me/quotes/`,\r\n    apiKey: \"\",\r\n    requiresKey: false\r\n  }\r\n  // rijksmuseum: {\r\n  //   url: `https://www.rijksmuseum.nl/api/en/collection/`,\r\n  //   apiKey: `5YN0Yigy`,\r\n  //   requiresKey: true\r\n  // },\r\n  // unsplash: {\r\n  //   url: `https://www.rijksmuseum.nl/api/en/collection/`,\r\n  //   apiKey: ``,\r\n  //   requiresKey: true\r\n  // }\r\n};\r\n\r\nexport default api;\r\n","import React, { Component } from \"react\";\r\nimport api from \"./api\";\r\n\r\nclass ThemePicker extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      api: api,\r\n      themes: []\r\n    };\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.id]: e.target.value\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"ThemePicker\">\r\n        <label htmlFor=\"ThemePicker\">Select A Card Theme</label>\r\n        {this.props.themes.map((theme) => {\r\n          return (\r\n            <div className=\"theme-picker\">\r\n              <button onChange={this.handleChange} value={theme} id={theme}>\r\n                {theme}\r\n              </button>\r\n              <label htmlFor={theme} />\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default ThemePicker;\r\n","import React, { Component } from \"react\";\r\nimport api from \"./api\";\r\nimport ThemePicker from \"./ThemePicker\";\r\n\r\nclass GamePicker extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      api: api,\r\n      currentAPI: api.simpsons.url,\r\n      difficulty: \"medium\",\r\n      name: \"Dan\",\r\n      themes: []\r\n    };\r\n  }\r\n  // myInput = React.createRef();\r\n\r\n  handleChange = (e) => {\r\n    e.preventDefault();\r\n    this.setState({\r\n      [e.target.id]: e.target.value\r\n    });\r\n  };\r\n\r\n  gotoGame = (e) => {\r\n    e.preventDefault();\r\n    this.props.history.push(`/game/`);\r\n  };\r\n\r\n  updateThemePickerOptions = () => {\r\n    const formattedTheme = Object.entries(this.state.api);\r\n    this.setState({\r\n      themes: Object.keys(this.state.api)\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.updateThemePickerOptions();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"GamePicker\">\r\n        <h1>Welcome to the Memory Game!</h1>\r\n        <form action=\"\" className=\"GamePicker-Form\" onSubmit={this.gotoGame}>\r\n          <label htmlFor=\"name\">Enter Name:</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            placeholder=\"Name\"\r\n            id=\"name\"\r\n            value={this.state.name}\r\n            onChange={this.handleChange}\r\n          />\r\n          <label htmlFor=\"easy\">Easy</label>\r\n          <input\r\n            type=\"radio\"\r\n            name=\"difficulty\"\r\n            id=\"difficulty\"\r\n            value=\"easy\"\r\n            onChange={this.handleChange}\r\n          />\r\n          <label htmlFor=\"medium\">Medium</label>\r\n          <input\r\n            type=\"radio\"\r\n            name=\"difficulty\"\r\n            id=\"difficulty\"\r\n            value=\"medium\"\r\n            checked\r\n            onChange={this.handleChange}\r\n          />\r\n          <label htmlFor=\"hard\">Hard</label>\r\n          <input\r\n            type=\"radio\"\r\n            name=\"difficulty\"\r\n            id=\"difficulty\"\r\n            value=\"hard\"\r\n            onChange={this.handleChange}\r\n          />\r\n          <ThemePicker themes={this.state.themes} />\r\n          <button type=\"submit\" id=\"gameSubmit\">\r\n            Lets Play!\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GamePicker;\r\n","import React from \"react\";\r\nconst Score = (props) => {\r\n  return (\r\n    <h4 className=\"score\">\r\n      {props.name} Score: {props.score}\r\n    </h4>\r\n  );\r\n};\r\n\r\nexport default Score;\r\n","import React from \"react\";\r\nimport Score from \"./Score\";\r\n\r\nconst Header = (props) => {\r\n  return (\r\n    <div>\r\n      <h2>{props.title}</h2>\r\n      <Score score={props.currentScore} name={props.playerName} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","export const toggleShow = () => {\r\n  this.setState((state) => ({ isVisable: !state.isVisable }));\r\n};\r\n\r\n// function to capitalize the first letter\r\nexport const capitalize = function(s) {\r\n  if (typeof s !== \"string\") return \"\";\r\n  return s.charAt(0).toUpperCase() + s.slice(1);\r\n};\r\n\r\n// Helper to flatten arrays\r\nexport const flattenArr = function(arr) {\r\n  return [].concat(...arr);\r\n};\r\nexport const randomizeArray = (arr) => {\r\n  for (var i = arr.length - 1; i > 0; i--) {\r\n    let j = Math.floor(Math.random() * (i + 1));\r\n    let temp = arr[i];\r\n    arr[i] = arr[j];\r\n    arr[j] = temp;\r\n  }\r\n  // console.log(arr);\r\n  return arr;\r\n};\r\n","import React from \"react\";\r\nimport { stringify } from \"querystring\";\r\nimport { flattenArr } from \"./helpers\";\r\n\r\nconst Card = (props) => {\r\n  const { selected, id, solved, image, click } = props;\r\n  // console.log(solved);\r\n  const solvedArr = flattenArr(solved);\r\n  const match =\r\n    selected.includes(id.toString()) || solvedArr.includes(id.toString());\r\n  return (\r\n    <div className={match ? \"card selected\" : \"card\"} onClick={click} id={id}>\r\n      <div className=\"front\" id={id}>\r\n        ?\r\n      </div>\r\n      <div className=\"back\" id={id}>\r\n        <img className=\"card-image\" src={image} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Card;\r\n","import React from \"react\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div>\r\n      <footer className=\"Footer\">\r\n        <span>Designed By Dan Ditomaso 2018</span>\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\nexport default Footer;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\n\n// COMPONENTS\nimport api from \"./components/api\";\nimport Header from \"./components/Header\";\nimport Card from \"./components/Card\";\n// import firebase from \"./components/firebase\";\n// import Score from \"./components/Score\";\n// import Timer from \"./components/Timer\";\nimport Footer from \"./components/Footer\";\nimport * as util from \"./components/helpers\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      api: api,\n      gameTitle: \"Memory Game!\",\n      currentAPI: api.simpsons.url,\n      score: 0,\n      timer: 0,\n      isShowing: true,\n      cards: [],\n      shuffledCards: [],\n      numOfRequestedImages: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n      correctMatches: [],\n      flippedCards: [],\n      selectedCard: []\n    };\n  }\n\n  getCardImages = async () => {\n    const promiseArray = this.state.numOfRequestedImages.map((item) =>\n      axios.get(this.state.currentAPI)\n    );\n    try {\n      const cards = (await Promise.all(promiseArray)).map((res) => res.data);\n      console.log(cards);\n      this.setState({ cards });\n      this.shuffleCards();\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  shuffleCards = () => {\n    let cardsArr = Array.from(this.state.cards);\n    console.log(this.state.cards);\n    cardsArr = cardsArr.concat(cardsArr);\n    const flattenedArr = util.flattenArr(cardsArr);\n    this.setState({ shuffledCards: util.randomizeArray(flattenedArr) });\n  };\n\n  checkForMatch = (cardId) => {\n    if (this.state.selectedCard.length <= 1) {\n      this.setState({ selectedCard: [...this.state.selectedCard, cardId] });\n    } else {\n      this.checkForSolved();\n    }\n  };\n\n  checkForSolved = () => {\n    const { selectedCard, shuffledCards, score, correctMatches } = this.state;\n    if (\n      shuffledCards[selectedCard[0]].character ==\n      shuffledCards[selectedCard[1]].character\n    ) {\n      console.log(\"match found\");\n      this.setState({\n        correctMatches: [...correctMatches, selectedCard],\n        score: score + 1,\n        selectedCard: []\n      });\n    } else {\n      console.log(\"else state hit on check for solved.\");\n      this.setState({ selectedCard: [] });\n    }\n  };\n\n  handleClick = (event) => {\n    event.preventDefault();\n    const cardId = event.target.id;\n    this.checkForMatch(cardId);\n  };\n\n  componentDidMount() {\n    this.getCardImages();\n  }\n\n  render() {\n    const { selectedCard, correctMatches, shuffledCards } = this.state;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Header\n            title={this.state.gameTitle}\n            currentScore={this.state.score}\n          />\n        </header>\n        <div className=\"GameBoard\">\n          {shuffledCards.map((card, index) => {\n            return (\n              <Card\n                key={card.image + card.name + index}\n                id={index}\n                name={card.character}\n                click={this.handleClick}\n                selected={selectedCard}\n                solved={correctMatches}\n                image={card.image}\n              />\n            );\n          })}\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\r\nconst notFound = () => (\r\n  <div className=\"NotFound\">\r\n    <h2>Not Found!!!!!!???!</h2>\r\n  </div>\r\n);\r\n\r\nexport default notFound;\r\n","import React from \"react\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport GamePicker from \"./GamePicker\";\r\nimport App from \"../App\";\r\nimport NotFound from \"./NotFound\";\r\n\r\nconst Router = () => (\r\n  <BrowserRouter>\r\n    <Switch>\r\n      <Route exact path=\"/\" component={GamePicker} />\r\n\r\n      <Route path=\"/game/\" component={App} />\r\n      <Route component={NotFound} />\r\n    </Switch>\r\n  </BrowserRouter>\r\n);\r\n\r\nexport default Router;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n// import App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Router from \"./components/Router\";\n\nReactDOM.render(<Router />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}